INCLUDE "lib/heap.v8inc"

heap_malloc:
    ; Вход: A = requested size
    PUSH A                ; сохранить размер
    MOVI B, HEAP_START    ; B = current

loop:
    ; Проверка конца кучи: if current >= HEAP_END → fail
    MOV A, B
    CMP A, HEAP_END
    JZ fail

    ; LOAD occupied_flag ← [B]
    LOAD A, B
    CMP A, FREE
    JZ check_size

next_block:
    ; Пропустить на следующий блок
    ; LOAD block_size ← [B + 1]
    MOV A, B
    INC A
    LOAD A, A             ; A = block_size

    ADD B, A
    PUSH A
    MOVI A, HEADER_SIZE
    ADD B, A              ; B = B + block_size + HEADER_SIZE
    POP A

    JMP loop

check_size:
    ; Чтение block_size из [B + 1]
    MOV A, B
    INC A
    LOAD A, A             ; A = block_size
    POP B                 ; B = requested size
    PUSH B
    CMP A, B              ; block_size vs requested
    JZ found_fit
    ; if size > block_size — перейти дальше
    CMP A, B
    JZ next_block
    JMP next_block

found_fit:
    ; Пометить блок как OCCUPIED
    POP B                 ; восстанавливаем size
    PUSH B                ; снова сохраняем
    MOV A, B              ; A = current
    STORE A, OCCUPIED     ; memory[current] = 1

    ; Вернуть current + HEADER_SIZE
    MOV A, B              ; A = current
    MOVI B, HEADER_SIZE
    ADD A, B              ; A = current + HEADER_SIZE
    RET

fail:
    MOVI A, 0x00
    RET
